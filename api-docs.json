{
openapi: "3.0.1",
info: {
title: "M-CMP API",
version: "v1"
},
servers: [
{
url: "http://localhost:18083",
description: "Generated server url"
}
],
security: [
{
Authorization: [ ]
}
],
tags: [
{
name: "workflowPipeline",
description: "워크플로우 스테이지 관리"
},
{
name: "Workflow",
description: "워크플로우 배포 관리"
},
{
name: "InfraProvisioning",
description: "인프라 생성"
},
{
name: "Deploy",
description: "워크플로우 배포 관리"
},
{
name: "CatalogDeploy",
description: "카탈로그 배포 관리"
},
{
name: "Catalog",
description: "카탈로그 관리"
},
{
name: "공통코드",
description: "공통코드 조회"
},
{
name: "k8s",
description: "k8s config 설정 (ArgoCd)"
},
{
name: "Software Catalog",
description: "sw 카탈로그 관리"
},
{
name: "oss",
description: "oss 설정 (GitLab, Jenkins, Harbor 등)"
}
],
paths: {
/workflow/{workflowId}: {
get: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 상세 조회",
operationId: "getWorkflow",
parameters: [
{
name: "workflowId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperWorkflow"
}
}
}
}
}
},
put: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 수정",
operationId: "updateWorkflow",
parameters: [
{
name: "workflowId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Workflow"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
},
delete: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 삭제",
operationId: "deleteWorkflow",
parameters: [
{
name: "workflowId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/wf/pipeline/{pipelineId}: {
get: {
tags: [
"workflowPipeline"
],
summary: "스테이지 조회",
operationId: "getPipeline",
parameters: [
{
name: "pipelineId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperPipeline"
}
}
}
}
}
},
put: {
tags: [
"workflowPipeline"
],
summary: "스테이지 수정",
operationId: "updatePipeline",
parameters: [
{
name: "pipelineId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Pipeline"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
},
delete: {
tags: [
"workflowPipeline"
],
summary: "스테이지 삭제",
operationId: "deletePipeline",
parameters: [
{
name: "pipelineId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/deploy/{deployId}: {
get: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 상세 조회",
operationId: "getDeploy",
parameters: [
{
name: "deployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperDeploy"
}
}
}
}
}
},
put: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 수정",
operationId: "updateDeploy",
parameters: [
{
name: "deployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Deploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
},
delete: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 삭제",
operationId: "deleteDeploy",
parameters: [
{
name: "deployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/config/oss/{ossId}: {
get: {
tags: [
"oss"
],
summary: "상세",
operationId: "getOss",
parameters: [
{
name: "ossId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperOss"
}
}
}
}
}
},
put: {
tags: [
"oss"
],
summary: "수정",
operationId: "updateOss",
parameters: [
{
name: "ossId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Oss"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
},
delete: {
tags: [
"oss"
],
summary: "삭제",
operationId: "deleteOss",
parameters: [
{
name: "ossId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperVoid"
}
}
}
}
}
}
},
/config/k8s/{k8sId}: {
get: {
tags: [
"k8s"
],
summary: "상세",
operationId: "getK8S",
parameters: [
{
name: "k8sId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperK8SConfig"
}
}
}
}
}
},
put: {
tags: [
"k8s"
],
summary: "수정",
operationId: "updateK8S",
parameters: [
{
name: "k8sId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/K8SConfig"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
},
delete: {
tags: [
"k8s"
],
summary: "삭제",
operationId: "deleteK8S",
parameters: [
{
name: "k8sId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperVoid"
}
}
}
}
}
}
},
/catalog/deploy/{catalogDeployId}: {
get: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 상세 조회",
operationId: "getCatalogDeploy",
parameters: [
{
name: "catalogDeployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperCatalogDeploy"
}
}
}
}
}
},
put: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 수정",
operationId: "upodateCatalogDeploy",
parameters: [
{
name: "catalogDeployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
},
delete: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 삭제",
operationId: "deleteCatalogDeploy",
parameters: [
{
name: "catalogDeployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/workflow: {
post: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 등록",
operationId: "createWorkflow",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Workflow"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/workflow/{workflowId}/run: {
post: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 실행",
operationId: "runWorkflow",
parameters: [
{
name: "workflowId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperObject"
}
}
}
}
}
}
},
/workflow/list: {
post: {
tags: [
"Workflow"
],
summary: "워크플로우 배포 목록 조회",
operationId: "getWorkflowList",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/WorkflowNew"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListWorkflowNew"
}
}
}
}
}
}
},
/wf/pipeline: {
post: {
tags: [
"workflowPipeline"
],
summary: "스테이지 등록",
operationId: "createPipeline",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Pipeline"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/wf/pipeline/list: {
post: {
tags: [
"workflowPipeline"
],
summary: "스테이지 목록 조회",
operationId: "getPipelineList",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Pipeline"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/infra: {
get: {
tags: [
"InfraProvisioning"
],
summary: "인프라 목록",
operationId: "getInfra",
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListMcis"
}
}
}
}
}
},
post: {
tags: [
"InfraProvisioning"
],
summary: "인프라 생성",
operationId: "setInfra",
parameters: [
{
name: "infra",
in: "query",
required: true,
schema: {
$ref: "#/components/schemas/InfraCommon"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListInfraCommon"
}
}
}
}
}
}
},
/deploy: {
post: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 등록",
operationId: "createDeploy",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Deploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/deploy/{deployId}/run: {
post: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 실행",
operationId: "runDeploy",
parameters: [
{
name: "deployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperObject"
}
}
}
}
}
}
},
/deploy/list: {
post: {
tags: [
"Deploy"
],
summary: "워크플로우 배포 목록 조회",
operationId: "getDeployList",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Deploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListDeploy"
}
}
}
}
}
}
},
/config/oss: {
post: {
tags: [
"oss"
],
summary: "등록",
operationId: "createOss",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Oss"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/config/oss/connection/check: {
post: {
tags: [
"oss"
],
summary: "연결확인",
operationId: "checkConnection",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/Oss"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/config/k8s: {
post: {
tags: [
"k8s"
],
summary: "등록",
operationId: "createK8S",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/K8SConfig"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/config/k8s/connection/check: {
post: {
tags: [
"k8s"
],
summary: "연결확인",
operationId: "checkConnection_1",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/ArgocdConfig"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/common/group/{commonGroupCd}/code: {
post: {
tags: [
"공통코드"
],
summary: "공통코드 추가",
operationId: "createCommonCode",
parameters: [
{
name: "commonGroupCd",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CommonCode"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperString"
}
}
}
}
}
}
},
/catalog/software/applicationCatalog: {
post: {
tags: [
"Software Catalog"
],
summary: "카탈로그 내용 입력",
operationId: "setAppCt",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalogDetail"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalogDetail"
}
}
}
}
}
},
delete: {
tags: [
"Software Catalog"
],
summary: "카탈로그 내용 삭제",
operationId: "delAppCt",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
}
},
/catalog/software/applicationCatalog/{scIdx}: {
post: {
tags: [
"Software Catalog"
],
summary: "카탈로그 내용 수정",
operationId: "editAppCt",
parameters: [
{
name: "scIdx",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
}
},
/catalog/software/applicationCatalog/workflow: {
post: {
tags: [
"Software Catalog"
],
summary: "연관 workflow 추가",
operationId: "addAppCtWorkflow",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
},
delete: {
tags: [
"Software Catalog"
],
summary: "연관 workflow 삭제",
operationId: "delAppCtWorkflow",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
}
},
/catalog/software/applicationCatalog/relation: {
post: {
tags: [
"Software Catalog"
],
summary: "연관 카탈로그 추가",
operationId: "addAppCtRelation",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
},
delete: {
tags: [
"Software Catalog"
],
summary: "연관 카탈로그 삭제",
operationId: "delAppCtRelation",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
}
},
/catalog/nexus/{nexusId}/{repository}: {
get: {
tags: [
"Catalog"
],
summary: "nexus repository 구성 목록조회",
operationId: "getNexusRepositoryIn",
parameters: [
{
name: "nexusId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "repository",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalog"
}
}
}
}
}
},
post: {
tags: [
"Catalog"
],
summary: "nexus file 등록(lib/jar/tar/etc...)",
operationId: "setLibNexus",
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalog"
}
}
}
}
}
}
},
/catalog/deploy: {
post: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 등록",
operationId: "createCatalogDeploy",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
},
/catalog/deploy/values: {
post: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 설정 조회 > values.yaml 파일 조회",
operationId: "getValuesYaml",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperString"
}
}
}
}
}
}
},
/catalog/deploy/list: {
post: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 목록 조회",
operationId: "getCatalogDeployList",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalogDeploy"
}
}
}
}
}
}
},
/catalog/deploy/copy: {
post: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 정보 복사",
operationId: "getCatalogDeployByCatalogName",
requestBody: {
content: {
application/json: {
schema: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
required: true
},
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalogDeploy"
}
}
}
}
}
}
},
/workflow/name/duplicate: {
get: {
tags: [
"Workflow"
],
summary: "워크플로우 배포명 중복 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "isWorkflowNameDuplicated",
parameters: [
{
name: "workflowName",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/workflow/jenkins/pipeline/{pipelineCd}: {
get: {
tags: [
"Workflow"
],
summary: "파이프라인 구분 별 목록 조회",
operationId: "getPipelineList_1",
parameters: [
{
name: "pipelineCd",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/workflow/jenkins/pipeline/default: {
get: {
tags: [
"Workflow"
],
summary: "파이프라인 생성 > Default 조회",
operationId: "getDefaultPipeline",
parameters: [
{
name: "workflowName",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "gitlabId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "gitlabProjectPath",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "branch",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "k8sId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/workflow/gitlab/connection/check: {
get: {
tags: [
"Workflow"
],
summary: "GitLab Clone URL 연결 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "checkGitlabProjectPathConnection",
parameters: [
{
name: "gitlabId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "gitlabProjectPath",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/wf/pipeline/name/duplicate: {
get: {
tags: [
"workflowPipeline"
],
summary: "스테이지 명 중복 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "isPipelineNameDuplicated",
parameters: [
{
name: "pipelineCd",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "pipelineName",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/wf/pipeline/default: {
get: {
tags: [
"workflowPipeline"
],
summary: "기본 스크립트 조회",
operationId: "getDefaultPipeline_1",
parameters: [
{
name: "pipelineCd",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/ns: {
get: {
tags: [
"InfraProvisioning"
],
summary: "네임스페이스 목록",
operationId: "getNamesapce",
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListInfraNameSpace"
}
}
}
}
}
}
},
/infra/deploy: {
get: {
tags: [
"InfraProvisioning"
],
summary: "인프라 생성 및 카탈로그 배포",
operationId: "setInfraDeploy",
parameters: [
{
name: "infra",
in: "query",
required: true,
schema: {
$ref: "#/components/schemas/InfraCommon"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListInfraCommon"
}
}
}
}
}
}
},
/gitlab/{gitLabId}/project: {
get: {
tags: [
"test-git-lab-controller"
],
operationId: "getProject",
parameters: [
{
name: "gitLabId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperProject"
}
}
}
}
}
}
},
/gitlab/{gitLabId}/file: {
get: {
tags: [
"test-git-lab-controller"
],
operationId: "getFile",
parameters: [
{
name: "gitLabId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperString"
}
}
}
}
}
}
},
/gitlab/connect: {
get: {
tags: [
"test-git-lab-controller"
],
operationId: "getApplication",
parameters: [
{
name: "url",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "id",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "password",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/deploy/name/duplicate: {
get: {
tags: [
"Deploy"
],
summary: "워크플로우 배포명 중복 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "isDeployNameDuplicated",
parameters: [
{
name: "deployName",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/deploy/jenkins/pipeline/{pipelineCd}: {
get: {
tags: [
"Deploy"
],
summary: "파이프라인 구분 별 목록 조회",
operationId: "getPipelineList_2",
parameters: [
{
name: "pipelineCd",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/deploy/jenkins/pipeline/default: {
get: {
tags: [
"Deploy"
],
summary: "파이프라인 생성 > Default 조회",
operationId: "getDefaultPipeline_2",
parameters: [
{
name: "deployName",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "gitlabId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "gitlabProjectPath",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "branch",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "k8sId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListPipeline"
}
}
}
}
}
}
},
/deploy/gitlab/connection/check: {
get: {
tags: [
"Deploy"
],
summary: "GitLab Clone URL 연결 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "checkGitlabProjectPathConnection_1",
parameters: [
{
name: "gitlabId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "gitlabProjectPath",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/config/oss/list: {
get: {
tags: [
"oss"
],
summary: "목록 조회",
operationId: "getOssList",
parameters: [
{
name: "ossCd",
in: "query",
required: false,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListOss"
}
}
}
}
}
}
},
/config/oss/duplicate: {
get: {
tags: [
"oss"
],
summary: "OSS 정보 중복 체크(oss명, url, username)",
description: "true : 중복 / false : 중복 아님",
operationId: "isOssInfoDuplicated",
parameters: [
{
name: "ossName",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "ossUrl",
in: "query",
required: true,
schema: {
type: "string"
}
},
{
name: "ossUsername",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/config/k8s/name/duplicate: {
get: {
tags: [
"k8s"
],
summary: "이름 중복 확인",
operationId: "isNameDuplicate",
parameters: [
{
name: "k8sName",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/config/k8s/list: {
get: {
tags: [
"k8s"
],
summary: "목록 조회",
operationId: "getK8SList",
parameters: [
{
name: "providerCd",
in: "query",
required: false,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListK8SConfig"
}
}
}
}
}
}
},
/config/k8s/count: {
get: {
tags: [
"k8s"
],
summary: "provider별 count",
operationId: "getK8SCount",
parameters: [
{
name: "providerCd",
in: "query",
required: false,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListMapStringObject"
}
}
}
}
}
}
},
/common/group/{commonGroupCd}: {
get: {
tags: [
"공통코드"
],
summary: "공통코드 목록 조회",
operationId: "getCommonCodeList",
parameters: [
{
name: "commonGroupCd",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCommonCode"
}
}
}
}
}
}
},
/catalog/software/list: {
get: {
tags: [
"Software Catalog"
],
summary: "카탈로그 목록 조회",
operationId: "getAppCtList",
parameters: [
{
name: "title",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListSwCatalog"
}
}
}
}
}
}
},
/catalog/software/detail/{applicationCatalogIdx}: {
get: {
tags: [
"Software Catalog"
],
summary: "카탈로그 내용 조회",
operationId: "getAppCtDetail",
parameters: [
{
name: "scIdx",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperSwCatalog"
}
}
}
}
}
}
},
/catalog/nexus/{nexusId}: {
get: {
tags: [
"Catalog"
],
summary: "nexus repository 목폭조회",
operationId: "getNexusRepository",
parameters: [
{
name: "nexusId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalog"
}
}
}
}
}
}
},
/catalog/list: {
get: {
tags: [
"Catalog"
],
summary: "카탈로그 목록 조회",
operationId: "getCatalogList",
parameters: [
{
name: "nexusId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperListCatalog"
}
}
}
}
}
}
},
/catalog/deploy/{catalogDeployId}/run: {
get: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포 실행",
operationId: "runCatalogDeploy",
parameters: [
{
name: "catalogDeployId",
in: "path",
required: true,
schema: {
type: "integer",
format: "int32"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperString"
}
}
}
}
}
}
},
/catalog/deploy/name/duplicate: {
get: {
tags: [
"CatalogDeploy"
],
summary: "카탈로그 배포명 중복 체크",
description: "true : 중복 / false : 중복 아님",
operationId: "isCatalogDeployNameDuplicated",
parameters: [
{
name: "k8sId",
in: "query",
required: true,
schema: {
type: "integer",
format: "int32"
}
},
{
name: "deployName",
in: "query",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperBoolean"
}
}
}
}
}
}
},
/: {
get: {
tags: [
"mcmp-backend-controller"
],
summary: "check alive",
operationId: "get",
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
type: "string"
}
}
}
}
}
}
},
/common/group/{commonGroupCd}/code/{commonCd}: {
delete: {
tags: [
"공통코드"
],
summary: "공통코드 삭제",
operationId: "deleteCommonCode",
parameters: [
{
name: "commonGroupCd",
in: "path",
required: true,
schema: {
type: "string"
}
},
{
name: "commonCd",
in: "path",
required: true,
schema: {
type: "string"
}
}
],
responses: {
200: {
description: "OK",
content: {
*/*: {
schema: {
$ref: "#/components/schemas/ResponseWrapperInteger"
}
}
}
}
}
}
}
},
components: {
schemas: {
Pipeline: {
type: "object",
properties: {
pipelineId: {
type: "integer",
format: "int32"
},
pipelineCd: {
type: "string"
},
pipelineCdName: {
type: "string"
},
pipelineName: {
type: "string"
},
pipelineScript: {
type: "string"
},
pipelineOrder: {
type: "integer",
format: "int32"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
Workflow: {
type: "object",
properties: {
workflowType: {
type: "string"
},
workflowId: {
type: "integer",
format: "int32"
},
workflowName: {
type: "string"
},
gitlabId: {
type: "integer",
format: "int32"
},
gitlabProjectPath: {
type: "string"
},
groupName: {
type: "string"
},
projectName: {
type: "string"
},
branch: {
type: "string"
},
vmId: {
type: "integer",
format: "int32"
},
vmName: {
type: "string"
},
k8sId: {
type: "integer",
format: "int32"
},
k8sName: {
type: "string"
},
providerCd: {
type: "string"
},
workflowYaml: {
type: "string"
},
jenkinsId: {
type: "integer",
format: "int32"
},
jenkinsJobName: {
type: "string"
},
pipelineScript: {
type: "string"
},
pipelines: {
type: "array",
items: {
$ref: "#/components/schemas/Pipeline"
}
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
ResponseWrapperBoolean: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "boolean"
}
}
},
ResponseWrapperInteger: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "integer",
format: "int32"
}
}
},
Deploy: {
type: "object",
properties: {
workflowId: {
type: "integer",
format: "int32"
},
workflowName: {
type: "string"
},
gitlabId: {
type: "integer",
format: "int32"
},
gitlabProjectPath: {
type: "string"
},
groupName: {
type: "string"
},
projectName: {
type: "string"
},
branch: {
type: "string"
},
vmId: {
type: "integer",
format: "int32"
},
vmName: {
type: "string"
},
k8sId: {
type: "integer",
format: "int32"
},
k8sName: {
type: "string"
},
providerCd: {
type: "string"
},
workflowYaml: {
type: "string"
},
jenkinsId: {
type: "integer",
format: "int32"
},
jenkinsJobName: {
type: "string"
},
pipelineScript: {
type: "string"
},
pipelines: {
type: "array",
items: {
$ref: "#/components/schemas/Pipeline"
}
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
Oss: {
type: "object",
properties: {
ossId: {
type: "integer",
format: "int32"
},
ossCd: {
type: "string"
},
ossName: {
type: "string"
},
ossDesc: {
type: "string"
},
ossUrl: {
type: "string"
},
ossUsername: {
type: "string"
},
ossPassword: {
type: "string"
},
ossToken: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
K8SConfig: {
type: "object",
properties: {
argocdUrl: {
type: "string"
},
argocdUsername: {
type: "string"
},
argocdPassword: {
type: "string"
},
argocdToken: {
type: "string"
},
k8sId: {
type: "integer",
format: "int32"
},
k8sName: {
type: "string"
},
providerCd: {
type: "string"
},
k8sDesc: {
type: "string"
},
content: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
CatalogDeploy: {
type: "object",
properties: {
argocdUrl: {
type: "string"
},
argocdUsername: {
type: "string"
},
argocdPassword: {
type: "string"
},
argocdToken: {
type: "string"
},
k8sId: {
type: "integer",
format: "int32"
},
k8sName: {
type: "string"
},
providerCd: {
type: "string"
},
k8sDesc: {
type: "string"
},
content: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
},
catalogDeployId: {
type: "integer",
format: "int32"
},
nexusId: {
type: "integer",
format: "int32"
},
namespace: {
type: "string"
},
catalogName: {
type: "string"
},
catalogVersion: {
type: "string"
},
deployName: {
type: "string"
},
catalogTypeCd: {
type: "string"
},
catalogDeployYaml: {
type: "string"
}
}
},
ResponseWrapperObject: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "object"
}
}
},
WorkflowNew: {
type: "object",
properties: {
workflowType: {
type: "string"
},
workflowId: {
type: "integer",
format: "int32"
},
workflowName: {
type: "string"
},
infraName: {
type: "string"
},
gitlabId: {
type: "integer",
format: "int32"
},
groupName: {
type: "string"
},
projectName: {
type: "string"
},
branch: {
type: "string"
},
gitlabProjectPath: {
type: "string"
},
nexusId: {
type: "integer",
format: "int32"
},
catalogName: {
type: "string"
},
catalogVersion: {
type: "string"
},
catalogTypeCd: {
type: "string"
},
infraType: {
type: "string"
},
k8sId: {
type: "integer",
format: "int32"
},
workflowYaml: {
type: "string"
},
jenkinsId: {
type: "integer",
format: "int32"
},
jenkinsJobName: {
type: "string"
},
pipelineScript: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
ResponseWrapperListWorkflowNew: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/WorkflowNew"
}
}
}
},
ResponseWrapperListPipeline: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/Pipeline"
}
}
}
},
InfraCommon: {
type: "object",
properties: {
infraIdx: {
type: "integer",
format: "int32"
},
description: {
type: "string"
},
installMonAgent: {
type: "string"
},
label: {
type: "string"
},
name: {
type: "string"
},
vm: {
$ref: "#/components/schemas/VM"
},
k8s: {
$ref: "#/components/schemas/K8S"
}
}
},
K8S: {
type: "object"
},
VM: {
type: "object",
properties: {
commonImage: {
type: "string"
},
commonSpec: {
type: "string"
},
description: {
type: "string"
},
label: {
type: "string"
},
rootDiskType: {
type: "string"
},
rootDiskSize: {
type: "string"
},
subGroupSize: {
type: "integer",
format: "int32"
},
name: {
type: "string"
}
}
},
ResponseWrapperListInfraCommon: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/InfraCommon"
}
}
}
},
ResponseWrapperListDeploy: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/Deploy"
}
}
}
},
ArgocdConfig: {
type: "object",
properties: {
argocdUrl: {
type: "string"
},
argocdUsername: {
type: "string"
},
argocdPassword: {
type: "string"
},
argocdToken: {
type: "string"
}
}
},
CommonCode: {
type: "object",
properties: {
commonGroupCd: {
type: "string"
},
commonCd: {
type: "string"
},
codeName: {
type: "string"
},
codeDesc: {
type: "string"
},
codeOrder: {
type: "integer",
format: "int32"
},
protectedYn: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
ResponseWrapperString: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "string"
}
}
},
JenkinsStage: {
type: "object",
properties: {
id: {
type: "string"
},
name: {
type: "string"
},
status: {
type: "string"
},
startTimeMillis: {
type: "integer",
format: "int64"
},
endTimeMillis: {
type: "integer",
format: "int64"
},
pauseDurationMillis: {
type: "integer",
format: "int64"
},
durationMillis: {
type: "integer",
format: "int64"
}
}
},
JenkinsWorkflow: {
type: "object",
properties: {
name: {
type: "string"
},
status: {
type: "string"
},
startTimeMillis: {
type: "integer",
format: "int64"
},
durationTimeMillis: {
type: "integer",
format: "int64"
},
stages: {
type: "array",
items: {
$ref: "#/components/schemas/JenkinsStage"
}
}
}
},
SwCatalog: {
type: "object",
properties: {
scIdx: {
type: "integer",
format: "int32"
},
scTitle: {
type: "string"
},
scVersion: {
type: "string"
},
scIcon: {
type: "string"
},
scSummary: {
type: "string"
},
scLocation: {
type: "string"
}
}
},
SwCatalogDetail: {
type: "object",
properties: {
scIdx: {
type: "integer",
format: "int32"
},
scTitle: {
type: "string"
},
scVersion: {
type: "string"
},
scIcon: {
type: "string"
},
scSummary: {
type: "string"
},
scLocation: {
type: "string"
},
scReference: {
type: "string"
},
scDescription: {
type: "string"
},
scCategory: {
type: "string"
},
workflows: {
type: "array",
items: {
$ref: "#/components/schemas/JenkinsWorkflow"
}
},
relationSwCatalog: {
type: "array",
items: {
$ref: "#/components/schemas/SwCatalog"
}
}
}
},
ResponseWrapperSwCatalogDetail: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/SwCatalogDetail"
}
}
},
ResponseWrapperSwCatalog: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/SwCatalog"
}
}
},
Catalog: {
type: "object",
properties: {
catalogId: {
type: "integer",
format: "int32"
},
catalogName: {
type: "string"
},
catalogVersion: {
type: "string"
},
catalogTypeCd: {
type: "string"
},
regId: {
type: "string"
},
regName: {
type: "string"
},
regDate: {
type: "string"
},
modId: {
type: "string"
},
modName: {
type: "string"
},
modDate: {
type: "string"
}
}
},
ResponseWrapperListCatalog: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/Catalog"
}
}
}
},
ResponseWrapperListCatalogDeploy: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
}
},
ResponseWrapperWorkflow: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/Workflow"
}
}
},
ResponseWrapperPipeline: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/Pipeline"
}
}
},
InfraNameSpace: {
type: "object",
properties: {
id: {
type: "string"
},
name: {
type: "string"
},
k8s: {
type: "string"
},
description: {
type: "string"
}
}
},
ResponseWrapperListInfraNameSpace: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/InfraNameSpace"
}
}
}
},
Mcis: {
type: "object",
properties: {
namespace: {
type: "string"
},
id: {
type: "string"
},
name: {
type: "string"
},
status: {
type: "string"
},
statusCount: {
$ref: "#/components/schemas/StatusCount"
},
targetStatus: {
type: "string"
},
targetAction: {
type: "string"
},
installMonAgent: {
type: "string"
},
masterVmId: {
type: "string"
},
masterIp: {
type: "string"
},
masterSSHPort: {
type: "string"
},
label: {
type: "string"
},
systemLabel: {
type: "string"
},
vm: {
type: "array",
items: {
$ref: "#/components/schemas/VM"
}
}
}
},
ResponseWrapperListMcis: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/Mcis"
}
}
}
},
StatusCount: {
type: "object",
properties: {
countTotal: {
type: "integer",
format: "int32"
},
countCreating: {
type: "integer",
format: "int32"
},
countRunning: {
type: "integer",
format: "int32"
},
countFailed: {
type: "integer",
format: "int32"
},
countSuspended: {
type: "integer",
format: "int32"
},
countRebooting: {
type: "integer",
format: "int32"
},
countTerminated: {
type: "integer",
format: "int32"
},
countSuspending: {
type: "integer",
format: "int32"
},
countResuming: {
type: "integer",
format: "int32"
},
countTerminating: {
type: "integer",
format: "int32"
},
countUndefined: {
type: "integer",
format: "int32"
}
}
},
CustomAttribute: {
type: "object",
properties: {
key: {
type: "string"
},
value: {
type: "string"
}
}
},
Namespace: {
type: "object",
properties: {
id: {
type: "integer",
format: "int64"
},
name: {
type: "string"
},
path: {
type: "string"
},
kind: {
type: "string"
},
fullPath: {
type: "string"
},
avatarUrl: {
type: "string"
},
webUrl: {
type: "string"
}
}
},
Owner: {
type: "object",
properties: {
avatarUrl: {
type: "string"
},
createdAt: {
type: "string",
format: "date-time"
},
email: {
type: "string"
},
id: {
type: "integer",
format: "int64"
},
name: {
type: "string"
},
state: {
type: "string"
},
username: {
type: "string"
},
webUrl: {
type: "string"
}
}
},
Permissions: {
type: "object",
properties: {
projectAccess: {
$ref: "#/components/schemas/ProjectAccess"
},
groupAccess: {
$ref: "#/components/schemas/ProjectAccess"
}
}
},
Project: {
type: "object",
properties: {
approvalsBeforeMerge: {
type: "integer",
format: "int32"
},
archived: {
type: "boolean"
},
avatarUrl: {
type: "string"
},
containerRegistryEnabled: {
type: "boolean"
},
createdAt: {
type: "string",
format: "date-time"
},
creatorId: {
type: "integer",
format: "int64"
},
defaultBranch: {
type: "string"
},
description: {
type: "string"
},
forksCount: {
type: "integer",
format: "int32"
},
forkedFromProject: {
$ref: "#/components/schemas/Project"
},
httpUrlToRepo: {
type: "string"
},
id: {
type: "integer",
format: "int64"
},
issuesEnabled: {
type: "boolean"
},
jobsEnabled: {
type: "boolean"
},
lastActivityAt: {
type: "string",
format: "date-time"
},
lfsEnabled: {
type: "boolean"
},
mergeMethod: {
type: "string",
enum: [
"merge",
"rebase_merge",
"ff"
]
},
mergeRequestsEnabled: {
type: "boolean"
},
name: {
type: "string"
},
namespace: {
$ref: "#/components/schemas/Namespace"
},
nameWithNamespace: {
type: "string"
},
onlyAllowMergeIfPipelineSucceeds: {
type: "boolean"
},
onlyAllowMergeIfAllDiscussionsAreResolved: {
type: "boolean"
},
openIssuesCount: {
type: "integer",
format: "int32"
},
owner: {
$ref: "#/components/schemas/Owner"
},
path: {
type: "string"
},
pathWithNamespace: {
type: "string"
},
permissions: {
$ref: "#/components/schemas/Permissions"
},
publicJobs: {
type: "boolean"
},
repositoryStorage: {
type: "string"
},
requestAccessEnabled: {
type: "boolean"
},
runnersToken: {
type: "string"
},
sharedRunnersEnabled: {
type: "boolean"
},
sharedWithGroups: {
type: "array",
items: {
$ref: "#/components/schemas/ProjectSharedGroup"
}
},
snippetsEnabled: {
type: "boolean"
},
sshUrlToRepo: {
type: "string"
},
starCount: {
type: "integer",
format: "int32"
},
tagList: {
type: "array",
items: {
type: "string"
}
},
visibilityLevel: {
type: "integer",
format: "int32"
},
visibility: {
type: "string",
enum: [
"public",
"private",
"internal"
]
},
wallEnabled: {
type: "boolean"
},
webUrl: {
type: "string"
},
wikiEnabled: {
type: "boolean"
},
printingMergeRequestLinkEnabled: {
type: "boolean"
},
resolveOutdatedDiffDiscussions: {
type: "boolean"
},
statistics: {
$ref: "#/components/schemas/ProjectStatistics"
},
initializeWithReadme: {
type: "boolean"
},
packagesEnabled: {
type: "boolean"
},
emptyRepo: {
type: "boolean"
},
licenseUrl: {
type: "string"
},
license: {
$ref: "#/components/schemas/ProjectLicense"
},
customAttributes: {
type: "array",
items: {
$ref: "#/components/schemas/CustomAttribute"
}
},
buildCoverageRegex: {
type: "string"
},
buildGitStrategy: {
type: "string",
enum: [
"fetch",
"clone"
]
},
readmeUrl: {
type: "string"
},
canCreateMergeRequestIn: {
type: "boolean"
},
importStatus: {
type: "string",
enum: [
"none",
"scheduled",
"failed",
"started",
"finished"
]
},
ciDefaultGitDepth: {
type: "integer",
format: "int32"
},
ciForwardDeploymentEnabled: {
type: "boolean"
},
ciConfigPath: {
type: "string"
},
removeSourceBranchAfterMerge: {
type: "boolean"
},
autoDevopsEnabled: {
type: "boolean"
},
autoDevopsDeployStrategy: {
type: "string",
enum: [
"continuous",
"manual",
"timed_incremental"
]
},
autocloseReferencedIssues: {
type: "boolean"
},
emailsDisabled: {
type: "boolean"
},
suggestionCommitMessage: {
type: "string"
},
squashOption: {
type: "string",
enum: [
"never",
"always",
"default_on",
"default_off"
]
},
markedForDeletionOn: {
type: "string",
format: "date-time"
},
public: {
type: "boolean"
}
}
},
ProjectAccess: {
type: "object",
properties: {
accessLevel: {
type: "string",
enum: [
"-1",
"0",
"5",
"10",
"20",
"30",
"40",
"40",
"50",
"60"
]
},
notificationLevel: {
type: "integer",
format: "int32"
}
}
},
ProjectLicense: {
type: "object",
properties: {
key: {
type: "string"
},
name: {
type: "string"
},
nickname: {
type: "string"
},
htmlUrl: {
type: "string"
},
sourceUrl: {
type: "string"
}
}
},
ProjectSharedGroup: {
type: "object",
properties: {
groupId: {
type: "integer",
format: "int64"
},
groupName: {
type: "string"
},
groupFullPath: {
type: "string"
},
groupAccessLevel: {
type: "string",
enum: [
"-1",
"0",
"5",
"10",
"20",
"30",
"40",
"40",
"50",
"60"
]
}
}
},
ProjectStatistics: {
type: "object",
properties: {
commitCount: {
type: "integer",
format: "int64"
},
storageSize: {
type: "integer",
format: "int64"
},
repositorySize: {
type: "integer",
format: "int64"
},
wikiSize: {
type: "integer",
format: "int64"
},
lfsObjectsSize: {
type: "integer",
format: "int64"
},
jobArtifactsSize: {
type: "integer",
format: "int64"
},
packagesSize: {
type: "integer",
format: "int64"
}
}
},
ResponseWrapperProject: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/Project"
}
}
},
ResponseWrapperDeploy: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/Deploy"
}
}
},
ResponseWrapperOss: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/Oss"
}
}
},
ResponseWrapperListOss: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/Oss"
}
}
}
},
ResponseWrapperK8SConfig: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/K8SConfig"
}
}
},
ResponseWrapperListK8SConfig: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/K8SConfig"
}
}
}
},
ResponseWrapperListMapStringObject: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
type: "object",
additionalProperties: {
type: "object"
}
}
}
}
},
ResponseWrapperListCommonCode: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/CommonCode"
}
}
}
},
ResponseWrapperListSwCatalog: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "array",
items: {
$ref: "#/components/schemas/SwCatalog"
}
}
}
},
ResponseWrapperCatalogDeploy: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
$ref: "#/components/schemas/CatalogDeploy"
}
}
},
ResponseWrapperVoid: {
type: "object",
properties: {
code: {
type: "integer",
format: "int32"
},
message: {
type: "string"
},
detail: {
type: "string"
},
data: {
type: "object"
}
}
}
},
securitySchemes: {
Authorization: {
type: "apiKey",
name: "Authorization",
in: "header"
}
}
}
}
